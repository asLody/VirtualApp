project.gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        prepareHackedAndroidJar()
    }

    @Override
    void buildFinished(BuildResult result) {
        restoreOriginAndroidJar()
    }
})

def prepareHackedAndroidJar() {
    def baseExtension = project.android
    def origin_android_jar = new File("${baseExtension.getSdkDirectory()}${File.separator}platforms${File.separator}android-${getCompileAPILevel(baseExtension)}${File.separator}android.jar")
    def backup_origin_android_jar = new File("${origin_android_jar.parentFile.absolutePath}${File.separator}android_virtual_app_backup.jar")
    def hacked_android_jar = new File("${rootProject.projectDir.absolutePath}${File.separator}android_libs${File.separator}android-${getCompileAPILevel(baseExtension)}${File.separator}android.jar")

    if (!hacked_android_jar.exists()) {
        throw new GradleException("${rootProject.name} needs supply a special android.jar (${hacked_android_jar})")
    }

    if (!origin_android_jar.exists()) {
        throw new GradleException("${origin_android_jar} is missing!")
    }

    if (!backup_origin_android_jar.exists()) {
        origin_android_jar.renameTo(backup_origin_android_jar)

        copy {
            from hacked_android_jar.absolutePath
            into origin_android_jar.parentFile.absolutePath
        }
    }
}

def restoreOriginAndroidJar() {
    def baseExtension = project.android
    def origin_android_jar = new File("${baseExtension.getSdkDirectory()}${File.separator}platforms${File.separator}android-${getCompileAPILevel(baseExtension)}${File.separator}android.jar")
    def backup_origin_android_jar = new File("${origin_android_jar.parentFile.absolutePath}${File.separator}android_virtual_app_backup.jar")

    if (backup_origin_android_jar.exists()) {
        backup_origin_android_jar.renameTo(origin_android_jar)
    }
}

int getCompileAPILevel(def baseExtension) {
    if (baseExtension.compileSdkVersion instanceof String) {
        if (baseExtension.compileSdkVersion.startsWith("android-")) {
            def apiLevelString = baseExtension.compileSdkVersion.substring("android-".length())
            return Integer.parseInt(apiLevelString)
        } else {
            String[] splits = baseExtension.compileSdkVersion.split("-")
            return Integer.parseInt(splits[1])
        }
    } else {
        return baseExtension.compileSdkVersion
    }
}